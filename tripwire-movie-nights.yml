- date: 2015-05-12
  videos:
    - title: The Future of Programming
      speaker: Bret Victor
      url: http://worrydream.com/dbx/
  attendance: 15
  comments: >
    Well presented, very authentic - only thing missing from his IBM technician
    outfit was a cigarette. The 60s/70s was such a fertile period for computing
    because we didn't know how computers were supposed to work, so we just
    tried everything. The surest barrier to discovering something is thinking
    you already know it. Lots of detailed notes and commentary in the link.
- date: 2015-05-26
  videos:
    - title: Treat Your Code as a Crime Scene
      speaker: Adam Tornhill
      url: http://www.infoq.com/presentations/code-bugs-legacy-pitfalls
  attendance: 16
  related-links:
    - https://twitter.com/AdamTornhill
    - http://www.adamtornhill.com/articles/crimegallery/codecrimescenegallery.htm
    - http://reevoo.github.io/blog/2015/05/21/your-code-as-a-crime-scene/
  comments: >
    "Intuition doesn't scale." "Complexity is only a problem when we have to
    deal with it." Lots of nods of agreement throughout. One of the last
    proposed ideas was to hook up and monitor the IDE; this sounds okay in
    theory, if a bit Orwellian, and will the gathered data be useful or noisy?
- date: 2015-06-02
  videos:
    - title: When We Build
      speaker: Wilson Miner
      url: http://wm4.wilsonminer.com/build2011/
  attendance: 19
  comments: >
    "The screen will shape the 21st century the way the car shaped the 20th."
    "Media is an extension of man", "a computer is like a bicycle for the mind"
    in how it amplifies. "What do we want to surround ourselves with?" "Be
    available in response." "Responsiveness is an attitude." "The apps that
    survive are the ones that adapt and respond." What options do our decisions
    open, and what doors do they close? Inspiring talk!
- date: 2015-06-09
  videos:
    - title: Release Testing is Risk Management Theatre
      speaker: Steve Smith
      url: http://www.infoq.com/presentations/release-testing
  attendance: 18
  comments: >
    "Release testing segregates authority from responsibility." In tests, you
    want "speed and determinism." This is more targetted at cloud delivery than
    on-prem. It's on both devs and testers to know the impact of changes,
    rather than trying to shake out distant dependencies in release testing.
    Some of our clients might be willing to pick up more frequent changes,
    perhaps in their dev environments.
  related-links:
    - https://www.simple-talk.com/opinion/opinion-pieces/release-testing-is-risk-management-theatre/
- date: 2015-06-16
  videos:
    - title: Developing ClojureScript With Figwheel
      speaker: Bruce Hauman
      url: https://www.youtube.com/watch?v=j-kj2qwJa_E
  attendance: 9
  comments: >
    A tight feedback loop is critical. From a front-end dev POV, this is
    mindblowing. You can build this in whatever, since it is just a websocket
    and some javascript - the challenge is making sure your javascript stack is
    reloadable. Kinda like Swift Playgrounds, but even more powerful. That
    tight feedback loop is why we build dev mode, because reloading is better
    than redeploying.
  related-links:
    - https://github.com/bhauman/lein-figwheel
    - https://github.com/bhauman/crashverse
- date: 2015-07-07
  videos:
    - title: Lambda Mechanics
      speaker: Marc Hoffmann
      url: http://www.infoq.com/presentations/lambda-java8
  attendance: 18
  comments: >
    Lambdas are so much cleaner than Guava. We have spent a lot of work to make
    using Guava performant, and much but not all of that would go away with
    lambdas. Groovy seems like it would benefit from some of this, but when
    they were updating to target the Java 8 language level, they found that
    performance was such a moving target that they ended up not using some of
    the new features.
  related-links:
    - https://github.com/marchof/lambda-mechanics
- date: 2015-07-21
  videos:
    - title: Building And Releasing an Online Game From Nothing With NoOps
      speaker: Jamie Winsor
      url: https://www.youtube.com/watch?v=0LcxsYdP_Oc
  attendance: 19
  comments: >
    Hire full stack engineers; get buy-in on (tech) choices; syntax kinda does
    matter - "syntax doesn't matter, especially when you already know it";
    every engineer needs to understand app langauges and cloud tooling; conduct
    positive code reviews; own your problems. Terraform sounds cool, as does
    consul. "Go is a modern language" - what makes it so?
  related-links:
    - https://chefconf2015a.sched.org/event/2a216c7197761a718872bd3a5cf16a5c
    - http://www.slideshare.net/chef-software/building-and-releasing-an-online-game-from-nothing-with-noops-chefconf-2015
- date: 2015-07-28
  videos:
    - title: Testing the Hard Stuff and Staying Sane
      speaker: John Hughes
      url: http://www.infoq.com/presentations/testing-techniques-case-study
  attendance: 23
  related-links:
    - http://lanyrd.com/2014/craftconf/scwhct/
  comments: >
    This seems like fuzz testing, but this does the minimal example, which is
    really cool. He glossed over how to wire it up; is that the hard part?
    Would it work with selenium? Might be slow and tie up a machine for a long
    time.
- date: 2015-08-04
  videos:
    - title: Reactive REST
      speaker: Jafar Husain
      url: http://www.infoq.com/presentations/netflix-reactive-rest
  attendance: 15
  related-links:
    - http://techblog.netflix.com/2013/01/reactive-programming-at-netflix.html
  comments: >
    "Tree + references = graph", except only acyclic graphs. This approach
    evaluates and caches references on the client. They added an escape hatch
    for procedural stuff: a call returns a list of references for the client to
    invalidate in its cache. Netflix has a very simple domain so this works
    really well for them; it probably would not work as well for TE. We do not
    want to build an entire new interface model; we would lose the advantage of
    simple clients we get with HTTP+REST.
- date: 2015-08-11
  videos:
    - title: Complexity Is Outside the Code
      speaker: Dan North and Jessica Kerr
      url: http://www.infoq.com/presentations/complexity-simplicity-esb
  related-links:
    - http://www.slideshare.net/jessitron/complexity-is-outside-the-code
    - https://www.flickr.com/photos/rockchalk/19158011635/
    - https://www.flickr.com/photos/rockchalk/18971888749/
    - https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard
  attendance: 17
  notes: >
    "If you're uncertain, give a range." "Surface risk." Devs all too
    frequently use "time to hello, world" as a metric. Part of kaizen is to
    improve process, but also need to question process. "Sustainably minimize
    lead time to business impact."
  comments: >
    We're actually decent and some of this. Estimates that are too big should
    be broken down into smaller stories, perhaps with research stories ahead of
    further estimation. Beware bundling "research X and implement it", because
    it doesn't allow time to learn and benefit from that knowledge. There is
    tension between "let each person learn/handle the things they are
    interested in" and "avoid silos".
- date: 2015-08-18
  videos:
    - title: An Exploration on the Purpose of Rules
      speaker: Sandi Metz
      url: https://www.youtube.com/watch?v=6FhkI1FMheA
  related-links:
    - https://blog.newrelic.com/2014/03/05/futuretalk-sandi-metz/
  attendance: 17
  notes: >
    "You won't ever understand [your OO app] the way you do [your procedural
    app]." Cost for being more OO is higher cognitive load when thinking about
    how the app works. You don't need to understand everything. Long-lived app
    is a kind of shared commons. "Bad programming drives out good."
  comments: >
    Sandi Metz is amazing. Although this is talking about Ruby on Rails, very
    little is ruby- or rails-specific. Blindly following rules is rarely a good
    idea, but it sounds like she's saying the fact of the rules is more
    important than the content of the rules. Part of the team storming and
    norming might be to agree upon the set of rules.
- date: 2015-08-25
  videos:
    - title: Be Awesome By Being Boring
      speaker: John Hyland
      url: http://confreaks.com/videos/4135-cascadiaruby2014-be-awesome-by-being-boring
  attendance: 21
  notes: >
    Make sure you're solving a real problem. Perf _can_ be a real problem.
    Boring choice is stable, reliable, has good tools, you already know it, and
    might ahve already deployed it. DNS SRV records over zookeeper, for
    example. Evaluate by age, usage, average issue age, most recent commit,
    number of stars / watchers, etc. Non-standard tech is expensive: make sure
    it's worth it.
- date: 2015-09-01
  videos:
    - title: Not an Estimating Problem
      speaker: Dale Emery
      url: https://www.youtube.com/watch?v=Wq16Cx0ScEo
    - title: Anyone Can Test
      speaker: Rob Sabourin
      url: https://www.youtube.com/watch?v=0vzbfpCU8Po
    - title: Technical Intimidation
      speaker: Chris Morris
      url: http://clabs.org/blog/TechnicalIntimidation
    - title: Monitoring is Never 'Done'
      speaker: Melanie Cey
      url: https://vimeo.com/131502999
    - title: Product Strategy is About Saying No
      speaker: Des Traynor
      url: https://vimeo.com/81544164
    - title: Seven Deadly Sins of Software Deployment
      speaker: Josh Berkus
      url: https://www.youtube.com/watch?v=VG5ZOOb5T9o
    - title: 17th Century Shipbuilding and Your Failed Software Product
      speaker: Pete Cheslock
      url: http://vimeo.com/95284690
    - title: Delete Your Code
      speaker: Aleksander Dabrowski
      url: https://www.youtube.com/watch?v=Oj4vXMRenFo
  attendance: 19
  notes: >
    Distinguish between "estimates" and "commitments". Communication is always
    key, in QA as in everywhere else. Software is hard; prefer broad design
    skills to platform knowledge; "always be the worst guy in every band you're
    in." Monitoring process is "definition, collection, visualation, action".
    1,000 "no"s for every "yes"; "If you have time to lean, you have time to
    clean." Test and communicate well; trust your team. Schedule pressure is a
    big problem; communication (again!). Delete your code!
  comments: >
    Lightning talks went well - if you're not into a video, you're only out 5
    minutes instead of 45.
- date: 2015-09-08
  videos:
    - title: "Chef Metal: Automate Your Whole Cluster In Chef"
      speaker: John Keiser
      url: https://www.youtube.com/watch?v=Yb8QdL30WgM
  attendance: 14
  comments: >
    Cool idea, but it seems heavily oriented towards reducing cloud computing
    costs, which isn't a problem we really have. 'Alpha' status means we
    probably won't use it for quite some time.
- date: 2015-09-15
  videos:
    - title: Crafting an Effective Security Organization
      speaker: Rich Smith
      url: http://www.infoq.com/presentations/security-etsy
  attendance: 18
  notes: >
    People are a part of security. Beware "Security Ego". Enable, don't block,
    or else be routed around. Invest in outreach. "Seed champions" - etsy
    embeds devs in security team for 4 weeks. Lower the barrier to see - be
    accessible and visible. Use blameless postmortems - see also Erik
    Hollnagel. Indicators of an effective security organization: data-driven,
    understands nuance, understands that security is a goal rather than a point;
    runs a bug bounty, which improves the results of pentesters because the low
    hanging fruit is gone and pentesters hate to submit an empty report, and
    feeds QA by directing attention to the areas were bugs are most frequently
    found; doesn't cry wolf, and has security engineers in the codebase instead
    of on the sidelines; makes realistic tradeoffs, understands '"no"s are a
    finite resource'; provides context and impact; recognizes and rewards;
    treats security as a brand, and gets people to buy in. DevSecOps!
  comments: >
    Much of this applies to any support organization. Boot camps are useful.
- date: 2015-09-29
  videos:
    - title: "Web Design: The First Hundred Years"
      speaker: Maciej Ceglowski
      url: https://youtu.be/nwhZ3KEqUlw
  related-links:
    - http://idlewords.com/talks/web_design_first_100_years.htm
  attendance: 19
  comments: >
    Moore's Law is easy to measure, but how do you measure UX? This may have
    driven some of the poor design decisions. "One of the best Movie Nights so
    far."
- date: 2015-10-06
  videos:
    - title: "30 Minutes or Less: The Magic of Automated Accessibility Testing"
      speaker: Marcy Sutton
      url: https://www.youtube.com/watch?v=-XUmf_RPF8k
  related-links:
    - http://marcysutton.github.io/a11y-automated-testing/
  attendance: 15
  notes: >
    Focus management is curating the keyboard tab experience; try just tabbing
    through a site. Color contrast is important, and there are standards around
    this. Check out gov.uk for a site that exemplifies focus management but
    needs a bit of work on color contrast. WAI-ARIA is a W3C Recommendation.
    Look at the automated tests in the Chrome GitHub organization. Look at
    Protractor for end-to-end testing.
  comments: >
    "I didn't even know there was such a thing as a screen reader!" "Does GWT
    have accessibility features?" you could add stuff by hand; not sure if
    actual features. There is a Section 508 government accessibility thing,
    but it's just a self-assessment - the Oracle database has it!
- date: 2015-10-13
  videos:
    - title: Introduction to Java Profiling
      speaker: Jerry Yoakum
      url: http://www.infoq.com/presentations/java-profiling
  related-links:
    - https://space.zeo.net/g/5eycb
  attendance: 16
  notes: >
    Only optimize once you know you have a problem. Start with wider nets
    before you go narrow. Use snapshots. Try multiple profilers. Make sure
    you're measuring what you intend - the compiler can rewrite, and measuring
    it will change it. Nothing compares to production.
  comments: >
    More perf talks!
- date: 2015-10-20
  videos:
    - title: The Reward
      speaker: James Shore
      url: http://www.infoq.com/presentations/agile-success
  related-links:
    - http://martinfowler.com/articles/agileFluency.html
  attendance: 16
  notes: >
    Cargo culting with agile methods. 90s software crisis: 1/6 projects
    succeeded, 1/3 failed. Revisit 4 values of Agile. Same survey, this time
    of agile projects: 66% succeeded, 6% failed. Fluency is unconscious
    competence. Agile fluency model. Agile is how you think; org thinking
    overrides team thinking.
  comments: >
    How high on the agile fluency model can we get? The detail in the slides
    is more useful than just the map. Does this model enable an org to avoid
    reflecting on its culture?
- date: 2015-10-27
  videos:
    - title: "Why Your Team Has Slowed Down, Why That's Worse than You Think, and How to Fix it"
      speaker: Edmund Jorgensen
      url: http://www.infoq.com/presentations/economy-team-slow-down
  attendance: 15
  notes: >
    Reducing latency generates information, which equals probable money. What
    are things that everyone hates to do? Aim for 30% time. Start with visible
    improvements that VIPs care about, as skunkworks if necessary.
- date: 2015-11-03
  videos:
    - title: The Worst Programming Language Ever
      speaker: Mark Rendle
      url: http://www.infoq.com/presentations/worst-programming-language
  attendance: 21
  notes: >
    "The pit of success" - make easy things easy. Know the purpose of a language.
- date: 2015-11-10
  videos:
    - title: 20 Bash Tricks in 5 Minutes
      speaker: Spencer Krum
      url: https://www.youtube.com/watch?v=pEN4WnFNMx0
    - title: The integrations we fear and how we can manage them
      speaker: Karoline Klever
      url: http://vimeo.com/89484179
    - title: The Abuse and Misuse of Test Automation - Interview
      speaker: Alan Page
      url: https://www.youtube.com/watch?v=ryiNDMkBUNY
  related-links:
    - https://github.com/nibalizer/bash-tricks
    - https://www.amazon.com/gp/product/158053791X
    - https://www.amazon.com/gp/product/0932633692
  attendance: 19
  notes: >
    Be careful with logs - not too much, not too little. "Automate the tests
    that should be automated." Need 100% confidence in tests. "Automate when
    bored." Hold test code to same standards as prod code. Make sure each test
    tests a single thing. Good logging up front!
- date: 2015-11-17
  videos:
    - title: Creating An Incremental Architecture For Your System
      speaker: Giovanni Asproni
      url: http://www.infoq.com/presentations/incremental-architecture
- date: 2015-11-24
  videos:
    - title: Security for non-unicorns
      speaker: Ben Hughes
      url: https://www.youtube.com/watch?v=B4ra9_KnMdk
  attendance: 17
  comments: >
    We should build our own docker / vagrant files - or we do, and we should do
    that more.  "Security people are jerks" - rather than just saying
    everything's awful, need to give enough information about problems to have
    a risk/cost discussion with the business.  There's an analogue here to QA:
    you can say "it's broken and this is awful" or "this checkbox is
    backwards"; one is more useful than the other.  Bug bounty? Need to do a
    lot of prep work first.
- date: 2015-12-01
  videos:
    - title: Naming Things
      speaker: Ian Barber
      url: http://www.infoq.com/presentations/name-clarity
  related-links:
    - http://www.codemesh.io/codemesh2014/ian-barber
  attendance: 21
  notes: >
    Names are primarily for humans. 1. Name (what we want), 2. address (where
    it is), 3. route (how we get there); the name gets less important for each
    of those steps.  Names are to refer to something, not describe something.
    Aspire to descriptiveness, mneumonic quality, and affordance. You can
    indicate a situation or idea is more complex than might otherwise be
    apparent in your choice of names.
- date: 2015-12-08
  videos:
    - title: Agile Essence and Fluency
      speaker: Martin Fowler
      url: https://www.thoughtworks.com/talks/software-development-21st-century-xconf-europe-2014
    - title: Continuous Delivery
      speaker: Martin Fowler
      url: https://www.thoughtworks.com/talks/software-development-21st-century-xconf-europe-2014
  attendance: 21
  notes: >
    The deployment pipeline should be bringing changes closer and closer to
    production through increasingly production-like environments. Agile says
    "if it hurts, do it more often."
  comments: >
    "Breaking dependencies" can apply to organizational dependencies as well as
    to dependencies in code.
- date: 2015-12-15
  videos:
    - title: Testing – Why Don't We Do It Like This?
      speaker: Jim Weirich
      url: https://vimeo.com/16515526
  attendance: 23
  notes: >
    Problems are mocking, persistence, meta, going outside the flow. Refactor
    tests to make them readable. Test the right thing: 1. what behaviors are
    important? -> specifications. 2. could you write the software from the
    tests? don't test private methods or ancillary objects. tests are code,
    tests are specs.
  comments: >
    So this was very rails-centric, and even in rails-land things have changed
    a bit since this talk. It's also very dev-centric, rather than QA-centric.
    We've been able to reimplement software from the tests before, and it was
    awesome.
- date: 2015-12-23
  videos:
    - title: Achieving Your Childhood Dreams
      speaker: Randy Pausch
      url: https://www.youtube.com/watch?v=ji5_MqicxSo
  related-links:
    - http://en.wikipedia.org/wiki/Really_Achieving_Your_Childhood_Dreams
    - http://www.cmu.edu/randyslecture/
- date: 2015-12-29
  videos:
    - title: History of Programming, Part I
      speaker: Mark Rendle
      url: https://vimeo.com/97541186
- date: 2016-01-05
  videos:
    - title: A Polyglot Approach to Enterprise Software
      speaker: Scott Shaw and James Gregory
      url: http://www.infoq.com/presentations/polyglot-enterprise-software
  attendance: 20
  notes: >
    Like potatos, needs diversity. Open APIs are enablers of change - analogy
    to bsuiness, needing approvals. No snowflake deployments!
- date: 2016-01-12
  videos:
    - title: The (not so) Dark Art of Performance Tuning, from Newts to Newton
      speaker: Kirk Pepperdine
      url: https://www.youtube.com/watch?v=jjXn6B_lH2I
  related-links:
    - https://speakerdeck.com/istanbultechtalks/itt-2015-kirk-pepperdine-the-not-so-dark-art-of-performance-tuning-from-newts-to-newton
    - http://www.istanbultechtalks.com/
  attendance: 25
  notes: >
    What is the dominant factor? Know the constraints of hardware - capacity
    and throughput. Make your test env look like prod. There are useful tools
    around thread dump analysis. Find the dominating consumer, fix, repeat.
  comments: >
    The first half of this talk was really good. The loop conditions
    (`(!user.isHappy()) && user.hasMoney()`) were amusing and insightful. The
    flowchart is super useful. The demo lagged pretty hard; it's hard to do
    demos in general, much less of a perf problem that's trivial enough to
    understand during a talk and complex enough to be worthwhile.
- date: 2016-01-19
  videos:
    - title: "Beyond DevOps: How Netflix Bridges the Gap"
      speaker: Josh Evans
      url: http://www.infoq.com/presentations/netflix-operations-devops
  related-links:
    - https://qconsf.com/sf2015/presentation/beyond-devops-netflix-operations-engineering
    - http://www.slideshare.net/JoshEvans2/beyond-devops-how-netflix-bridges-the-gap
  attendance: 20
  notes: >
    failure of communication - reach out to the people you support. Grease the
    squeaky wheels; they're doing you a favor by speaking up loudly and early.
    Provide valuable solutions to make people's lives better. Make it easy to
    do the right thing!
  comments: >
    Failing to do these things leads to people routing around you as damage.
- date: 2016-01-26
  videos:
    - title: Autonomy and Leadership at Spotify
      speaker: Anders Ivarsson
      url: http://www.infoq.com/presentations/autonomy-leadership-spotify
  related-links:
    - http://www.agileaustralia.com.au/2015/program
    - http://www.agileaustralia.com.au/2015/presentations/Agile-Australia-2015-Anders-Ivarsson.pdf
  attendance: 31
  notes: >
    Feature/platform cross-functional squads; cross-team chapters, eg "backend
    devs". No chapter leads; prevents members from being active.  Tech leads &
    product leads worked out for tribes (groups of teams). No middlemen - just
    go direct. Squad always asking "who are users? stakeholders?" to understand
    context.  Squad-level metrics. "Learning is a core delivery." "Leadership
    is a behavior, not a role." alignment and autonomy do not conflict.
  comments: >
    How does failure and continuous delivery work? A/B testing with a gradual
    ramp-up to newly deployed code. Hack week sounds cool, how do we do that?
    Do we have cultural obstacles? Team vs manager accountability. We are
    "starved for data". "Talks like this are interesting."
- date: 2016-02-02
  videos:
    - title: 'Delivering Performance Under Schedule and Resource Pressure: Lessons Learned at Google and Microsoft'
      speaker: Ivan Filho
      url: http://www.infoq.com/presentations/performance-manager-google-microsoft
  comments: >
    Kinda more focused on management. The stages of denial were really good.
- date: 2016-02-09
  videos:
    - title: "Conditions for Best Job Ever, Team Communication and Five Rules of Learning"
      speaker: Diana Larsen
      url: http://www.infoq.com/interviews/agile2014-larsen-bestjob
    - title: git bisect
      speaker: Christian Couder
      url: https://www.youtube.com/watch?v=CtIkm9Zy1iw
    - title: A Flawed Approach to Regression Testing
      speaker: Richard Bradshaw
      url: https://www.youtube.com/watch?v=P2PUXqasvGI
    - title: FART Response
      speaker: Lim Soon Sim
      url: https://www.youtube.com/watch?v=jooKkyH-c_U
    - title: Refactoring; or Why Your Code Sucks and How to Fix It
      speaker: Christopher Groskopf
      url: http://vimeo.com/91425593
    - title: How to replace yourself with a very small shell Script
      speaker: Hilary Mason
      url: http://www.ignitetalks.io/videos/how-to-replace-yourself-with-a-very-small-shell-script
  attendance: 21
  notes: >
    Best job ever: what/how - the work itself; why; who. 5 rules of learning:
    1. keep it alive - _humans_ are learning; 2. do it for real - actually
    practice/test it; 3. setting first - does the environment support learning?
    4. start obvious, stay obvious - be clear on what you're focusing on; 5.
    flow - make sure we're between overwhelming and boring.  FART - checks
    encode knowledge at a certain point in time; tests need to be revisited to
    make sure that knowledge still applies to the changing system. RCRCRC -
    Recent, Core, Risky, Configuration, Repaired, Chronic.  Don't focus on
    checks to the exclusion of gaining new knowledge.
  comments: >
    FART is a useful way to think about things. It doesn't feel like we're far
    enough along to be the target audience. There is an emphasis in refactoring
    on the dev side; need more of that on the test side. Devs need to more
    actively involve QA in changes.
- date: 2016-02-16
  videos:
    - title: Is that API Secure?
      speaker: Marko Vuksanovic
      url: http://www.infoq.com/presentations/http-api-security
  related-links:
    - https://qconlondon.com/london-2015/presentation/implementing-continuous-delivery-adjusting-your-architecture.html
    - http://www.slideshare.net/InfoQ/implementing-continuous-delivery-adjusting-your-architecture
  attendance: 13
  notes: >
    Check out Vault Project, Key Whiz, and AWS Key Management Services.
    Intro to Javascript Object Signing and Encryption (JOSE).
  comments: >
    Introductory talk - Security 101. Some interesting OAuth stuff, which we
    don't play with much.
